"""Add constraints; use hashed_password for Seller

Revision ID: 04be10e1f89a
Revises: 62f5dd3d2be2
Create Date: 2019-10-06 11:09:14.774382

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "04be10e1f89a"
down_revision = "62f5dd3d2be2"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "buy_orders", "buyer_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.alter_column(
        "buy_orders",
        "number_of_shares",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=False,
    )
    op.alter_column(
        "buy_orders",
        "price",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=False,
    )
    op.alter_column("buyers", "email", existing_type=sa.VARCHAR(), nullable=False)
    op.create_unique_constraint(None, "buyers", ["email"])
    op.alter_column(
        "invites", "destination_email", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "invites", "expiry_time", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.alter_column(
        "invites", "origin_seller_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.alter_column("invites", "valid", existing_type=sa.BOOLEAN(), nullable=False)
    op.alter_column(
        "matches", "buy_order_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.alter_column(
        "matches",
        "number_of_shares",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=False,
    )
    op.alter_column(
        "matches",
        "price",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=False,
    )
    op.alter_column(
        "matches", "sell_order_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.alter_column(
        "sell_orders",
        "number_of_shares",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=False,
    )
    op.alter_column(
        "sell_orders",
        "price",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=False,
    )
    op.alter_column(
        "sell_orders", "seller_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.add_column("sellers", sa.Column("hashed_password", sa.String(), nullable=False))
    op.alter_column("sellers", "email", existing_type=sa.VARCHAR(), nullable=False)
    op.create_unique_constraint(None, "sellers", ["email"])
    op.drop_column("sellers", "password")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "sellers",
        sa.Column("password", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "sellers", type_="unique")
    op.alter_column("sellers", "email", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_column("sellers", "hashed_password")
    op.alter_column(
        "sell_orders", "seller_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.alter_column(
        "sell_orders",
        "price",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=True,
    )
    op.alter_column(
        "sell_orders",
        "number_of_shares",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=True,
    )
    op.alter_column(
        "matches", "sell_order_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.alter_column(
        "matches",
        "price",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=True,
    )
    op.alter_column(
        "matches",
        "number_of_shares",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=True,
    )
    op.alter_column(
        "matches", "buy_order_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.alter_column("invites", "valid", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column(
        "invites", "origin_seller_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.alter_column(
        "invites", "expiry_time", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(
        "invites", "destination_email", existing_type=sa.VARCHAR(), nullable=True
    )
    op.drop_constraint(None, "buyers", type_="unique")
    op.alter_column("buyers", "email", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column(
        "buy_orders",
        "price",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=True,
    )
    op.alter_column(
        "buy_orders",
        "number_of_shares",
        existing_type=postgresql.DOUBLE_PRECISION(precision=53),
        nullable=True,
    )
    op.alter_column(
        "buy_orders", "buyer_id", existing_type=postgresql.UUID(), nullable=True
    )
    # ### end Alembic commands ###
