"""Merge buyers and sellers

Revision ID: 820edc601f67
Revises: 774e33f26820
Create Date: 2019-10-10 11:18:27.497462

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "820edc601f67"
down_revision = "774e33f26820"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("full_name", sa.String(), nullable=False),
        sa.Column("can_buy", sa.Boolean(), nullable=False),
        sa.Column("can_sell", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "sell_invites",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("origin_seller_id", postgresql.UUID(), nullable=False),
        sa.Column("destination_email", sa.String(), nullable=False),
        sa.Column("valid", sa.Boolean(), nullable=False),
        sa.Column("expiry_time", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["origin_seller_id"], ["users.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column("buy_orders", sa.Column("user_id", postgresql.UUID(), nullable=False))
    op.drop_constraint("buy_orders_buyer_id_fkey", "buy_orders", type_="foreignkey")
    op.create_foreign_key(None, "buy_orders", "users", ["user_id"], ["id"])
    op.drop_column("buy_orders", "buyer_id")
    op.add_column(
        "sell_orders", sa.Column("user_id", postgresql.UUID(), nullable=False)
    )
    op.drop_constraint("sell_orders_seller_id_fkey", "sell_orders", type_="foreignkey")
    op.create_foreign_key(None, "sell_orders", "users", ["user_id"], ["id"])
    op.drop_column("sell_orders", "seller_id")
    op.drop_table("invites")
    op.drop_table("buyers")
    op.drop_table("sellers")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "sellers",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("hashed_password", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("full_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="sellers_pkey"),
        sa.UniqueConstraint("email", name="sellers_email_key"),
    )
    op.create_table(
        "buyers",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="buyers_pkey"),
        sa.UniqueConstraint("email", name="buyers_email_key"),
    )
    op.create_table(
        "invites",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "origin_seller_id", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "destination_email", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column("valid", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "expiry_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["origin_seller_id"], ["sellers.id"], name="invites_origin_seller_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="invites_pkey"),
    )
    op.add_column(
        "sell_orders",
        sa.Column("seller_id", postgresql.UUID(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "sell_orders", type_="foreignkey")
    op.create_foreign_key(
        "sell_orders_seller_id_fkey", "sell_orders", "sellers", ["seller_id"], ["id"]
    )
    op.drop_column("sell_orders", "user_id")
    op.add_column(
        "buy_orders",
        sa.Column("buyer_id", postgresql.UUID(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "buy_orders", type_="foreignkey")
    op.create_foreign_key(
        "buy_orders_buyer_id_fkey", "buy_orders", "buyers", ["buyer_id"], ["id"]
    )
    op.drop_column("buy_orders", "user_id")
    op.drop_table("sell_invites")
    op.drop_table("users")
    # ### end Alembic commands ###
